fmake
=====
 ______________________________ 
| > C:\AndroidApp\        - o x|
|------------------------------|
| $ fmake                      |
| ++ gradle buildDebug         |
!______________________________!

fmake is a tool that brings `make`s interface to almost any build system.

fmake offers a functionality similar to vim's makeprg, but does so in a
way that it can be used in various other programs and applications.

fmake "intelligently" knows what targets to build and can be
configured in the config.h file.

Usage
-----

fmake [options] [target] ...
Options:
  -?            Prints fmake usage
  -1|2|3        Force fmake to start from the level specified
  -C path       Change to directory before calling the programs
  -D            Print various types of debugging information.
  -N            Don't actually run any build commands; just print them.
  -V            Print the version number of make and exit.

Build Chains
------------
fmake automatically understands the following(and many more) sequences,
and tries to run it one after the other

	$ cmake -Bout .
	$ cd out
	$ make

--------(vs)----------

    $ fmake    ------------------=> [ You only have to type fmake! ]
    ++ cmake -Bout
        ...
    ++ cmake --build out

fmake can be forced to re-run the generator using `fmake -2`


Supported build files
---------------------
fmake queries filenames from `maker_config_t makers[]` defined in config.h.

Building fmake
--------------
*NIX,
        $ make
        $ make install

MSVC,
        * Open Developer Command Prompt *
        C:\fmake> nmake

Additionally 'type=release' can be passed to build as release.
Default is debug.

FAQ
----
> Why ?
fmake was born out of my frustration with having to remember specific
commands for every project I worked on.

> Why default to 'out/' ?
'out/' is preferred, as more and more projects are using the 'build'
directory for other purposes like setting up CI/CD.

See Also
--------
* errorformat by reviewdog
